// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn
open Microsoft.FSharp.Text.Lexing

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 23 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | COLON
  | QST
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVASSIGN
  | MODASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | PREINC
  | PREDEC
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | FOR
  | SWITCH
  | CASE
  | DEFAULT
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_QST
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUSASSIGN
    | TOKEN_MINUSASSIGN
    | TOKEN_TIMESASSIGN
    | TOKEN_DIVASSIGN
    | TOKEN_MODASSIGN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_PREINC
    | TOKEN_PREDEC
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFAULT
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_CaseList
    | NONTERM_CaseDec
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | COLON  -> 11 
  | QST  -> 12 
  | NOT  -> 13 
  | SEQOR  -> 14 
  | SEQAND  -> 15 
  | EQ  -> 16 
  | NE  -> 17 
  | GT  -> 18 
  | LT  -> 19 
  | GE  -> 20 
  | LE  -> 21 
  | PLUSASSIGN  -> 22 
  | MINUSASSIGN  -> 23 
  | TIMESASSIGN  -> 24 
  | DIVASSIGN  -> 25 
  | MODASSIGN  -> 26 
  | PLUS  -> 27 
  | MINUS  -> 28 
  | TIMES  -> 29 
  | DIV  -> 30 
  | MOD  -> 31 
  | PREINC  -> 32 
  | PREDEC  -> 33 
  | CHAR  -> 34 
  | ELSE  -> 35 
  | IF  -> 36 
  | INT  -> 37 
  | NULL  -> 38 
  | PRINT  -> 39 
  | PRINTLN  -> 40 
  | RETURN  -> 41 
  | VOID  -> 42 
  | WHILE  -> 43 
  | FOR  -> 44 
  | SWITCH  -> 45 
  | CASE  -> 46 
  | DEFAULT  -> 47 
  | CSTSTRING _ -> 48 
  | NAME _ -> 49 
  | CSTINT _ -> 50 
  | CSTBOOL _ -> 51 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_QST 
  | 13 -> TOKEN_NOT 
  | 14 -> TOKEN_SEQOR 
  | 15 -> TOKEN_SEQAND 
  | 16 -> TOKEN_EQ 
  | 17 -> TOKEN_NE 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_LT 
  | 20 -> TOKEN_GE 
  | 21 -> TOKEN_LE 
  | 22 -> TOKEN_PLUSASSIGN 
  | 23 -> TOKEN_MINUSASSIGN 
  | 24 -> TOKEN_TIMESASSIGN 
  | 25 -> TOKEN_DIVASSIGN 
  | 26 -> TOKEN_MODASSIGN 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_TIMES 
  | 30 -> TOKEN_DIV 
  | 31 -> TOKEN_MOD 
  | 32 -> TOKEN_PREINC 
  | 33 -> TOKEN_PREDEC 
  | 34 -> TOKEN_CHAR 
  | 35 -> TOKEN_ELSE 
  | 36 -> TOKEN_IF 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_NULL 
  | 39 -> TOKEN_PRINT 
  | 40 -> TOKEN_PRINTLN 
  | 41 -> TOKEN_RETURN 
  | 42 -> TOKEN_VOID 
  | 43 -> TOKEN_WHILE 
  | 44 -> TOKEN_FOR 
  | 45 -> TOKEN_SWITCH 
  | 46 -> TOKEN_CASE 
  | 47 -> TOKEN_DEFAULT 
  | 48 -> TOKEN_CSTSTRING 
  | 49 -> TOKEN_NAME 
  | 50 -> TOKEN_CSTINT 
  | 51 -> TOKEN_CSTBOOL 
  | 54 -> TOKEN_end_of_input
  | 52 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_StmtOrDecSeq 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_Stmt 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_StmtM 
    | 34 -> NONTERM_CaseList 
    | 35 -> NONTERM_CaseList 
    | 36 -> NONTERM_CaseList 
    | 37 -> NONTERM_CaseDec 
    | 38 -> NONTERM_StmtU 
    | 39 -> NONTERM_StmtU 
    | 40 -> NONTERM_StmtU 
    | 41 -> NONTERM_StmtU 
    | 42 -> NONTERM_StmtU 
    | 43 -> NONTERM_StmtU 
    | 44 -> NONTERM_Expr 
    | 45 -> NONTERM_Expr 
    | 46 -> NONTERM_Expr 
    | 47 -> NONTERM_Expr 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_ExprNotAccess 
    | 66 -> NONTERM_ExprNotAccess 
    | 67 -> NONTERM_ExprNotAccess 
    | 68 -> NONTERM_ExprNotAccess 
    | 69 -> NONTERM_ExprNotAccess 
    | 70 -> NONTERM_ExprNotAccess 
    | 71 -> NONTERM_ExprNotAccess 
    | 72 -> NONTERM_ExprNotAccess 
    | 73 -> NONTERM_AtExprNotAccess 
    | 74 -> NONTERM_AtExprNotAccess 
    | 75 -> NONTERM_AtExprNotAccess 
    | 76 -> NONTERM_Access 
    | 77 -> NONTERM_Access 
    | 78 -> NONTERM_Access 
    | 79 -> NONTERM_Access 
    | 80 -> NONTERM_Access 
    | 81 -> NONTERM_Exprs 
    | 82 -> NONTERM_Exprs 
    | 83 -> NONTERM_Exprs1 
    | 84 -> NONTERM_Exprs1 
    | 85 -> NONTERM_Const 
    | 86 -> NONTERM_Const 
    | 87 -> NONTERM_Const 
    | 88 -> NONTERM_Const 
    | 89 -> NONTERM_Type 
    | 90 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 54 
let _fsyacc_tagOfErrorTerminal = 52

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | COLON  -> "COLON" 
  | QST  -> "QST" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUSASSIGN  -> "PLUSASSIGN" 
  | MINUSASSIGN  -> "MINUSASSIGN" 
  | TIMESASSIGN  -> "TIMESASSIGN" 
  | DIVASSIGN  -> "DIVASSIGN" 
  | MODASSIGN  -> "MODASSIGN" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | PREINC  -> "PREINC" 
  | PREDEC  -> "PREDEC" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | DEFAULT  -> "DEFAULT" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QST  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUSASSIGN  -> (null : System.Object) 
  | MINUSASSIGN  -> (null : System.Object) 
  | TIMESASSIGN  -> (null : System.Object) 
  | DIVASSIGN  -> (null : System.Object) 
  | MODASSIGN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | PREINC  -> (null : System.Object) 
  | PREDEC  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 9us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 47us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 12us; 65535us; 27us; 28us; 31us; 32us; 37us; 58us; 40us; 58us; 43us; 58us; 47us; 58us; 62us; 58us; 63us; 58us; 68us; 58us; 77us; 58us; 87us; 58us; 94us; 58us; 4us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 47us; 48us; 7us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 47us; 40us; 62us; 97us; 87us; 88us; 94us; 95us; 10us; 65535us; 37us; 49us; 40us; 49us; 43us; 49us; 47us; 49us; 62us; 50us; 63us; 64us; 68us; 69us; 77us; 78us; 87us; 49us; 94us; 49us; 2us; 65535us; 83us; 84us; 90us; 91us; 2us; 65535us; 83us; 90us; 90us; 90us; 10us; 65535us; 37us; 51us; 40us; 51us; 43us; 51us; 47us; 51us; 62us; 51us; 63us; 96us; 68us; 98us; 77us; 99us; 87us; 51us; 94us; 51us; 46us; 65535us; 37us; 52us; 40us; 52us; 43us; 52us; 45us; 46us; 47us; 52us; 54us; 56us; 60us; 61us; 62us; 52us; 63us; 52us; 66us; 67us; 68us; 52us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 52us; 80us; 81us; 87us; 52us; 92us; 93us; 94us; 52us; 109us; 110us; 111us; 112us; 113us; 114us; 115us; 116us; 117us; 118us; 119us; 120us; 122us; 147us; 125us; 126us; 127us; 128us; 148us; 130us; 149us; 131us; 150us; 132us; 151us; 133us; 152us; 134us; 153us; 135us; 154us; 136us; 155us; 137us; 156us; 138us; 157us; 139us; 158us; 140us; 159us; 141us; 160us; 142us; 161us; 143us; 162us; 145us; 164us; 144us; 175us; 146us; 178us; 147us; 46us; 65535us; 37us; 102us; 40us; 102us; 43us; 102us; 45us; 102us; 47us; 102us; 54us; 102us; 60us; 102us; 62us; 102us; 63us; 102us; 66us; 102us; 68us; 102us; 71us; 102us; 73us; 102us; 75us; 102us; 77us; 102us; 80us; 102us; 87us; 102us; 92us; 102us; 94us; 102us; 109us; 102us; 111us; 102us; 113us; 102us; 115us; 102us; 117us; 102us; 119us; 102us; 122us; 102us; 125us; 102us; 127us; 102us; 148us; 102us; 149us; 102us; 150us; 102us; 151us; 102us; 152us; 102us; 153us; 102us; 154us; 102us; 155us; 102us; 156us; 102us; 157us; 102us; 158us; 102us; 159us; 102us; 160us; 102us; 161us; 102us; 162us; 102us; 164us; 103us; 175us; 102us; 178us; 102us; 47us; 65535us; 37us; 108us; 40us; 108us; 43us; 108us; 45us; 108us; 47us; 108us; 54us; 108us; 60us; 108us; 62us; 108us; 63us; 108us; 66us; 108us; 68us; 108us; 71us; 108us; 73us; 108us; 75us; 108us; 77us; 108us; 80us; 108us; 87us; 108us; 92us; 108us; 94us; 108us; 109us; 108us; 111us; 108us; 113us; 108us; 115us; 108us; 117us; 108us; 119us; 108us; 122us; 108us; 125us; 108us; 127us; 108us; 148us; 108us; 149us; 108us; 150us; 108us; 151us; 108us; 152us; 108us; 153us; 108us; 154us; 108us; 155us; 108us; 156us; 108us; 157us; 108us; 158us; 108us; 159us; 108us; 160us; 108us; 161us; 108us; 162us; 108us; 164us; 108us; 172us; 174us; 175us; 108us; 178us; 108us; 51us; 65535us; 37us; 101us; 40us; 101us; 43us; 101us; 45us; 101us; 47us; 101us; 54us; 101us; 60us; 101us; 62us; 101us; 63us; 101us; 66us; 101us; 68us; 101us; 71us; 101us; 73us; 101us; 75us; 101us; 77us; 101us; 80us; 101us; 87us; 101us; 92us; 101us; 94us; 101us; 104us; 105us; 106us; 107us; 109us; 101us; 111us; 101us; 113us; 101us; 115us; 101us; 117us; 101us; 119us; 101us; 122us; 101us; 125us; 101us; 127us; 101us; 148us; 101us; 149us; 101us; 150us; 101us; 151us; 101us; 152us; 101us; 153us; 101us; 154us; 101us; 155us; 101us; 156us; 101us; 157us; 101us; 158us; 101us; 159us; 101us; 160us; 101us; 161us; 101us; 162us; 101us; 164us; 100us; 166us; 167us; 169us; 170us; 172us; 173us; 175us; 101us; 178us; 101us; 1us; 65535us; 122us; 123us; 2us; 65535us; 122us; 177us; 178us; 179us; 47us; 65535us; 37us; 163us; 40us; 163us; 43us; 163us; 45us; 163us; 47us; 163us; 54us; 163us; 60us; 163us; 62us; 163us; 63us; 163us; 66us; 163us; 68us; 163us; 71us; 163us; 73us; 163us; 75us; 163us; 77us; 163us; 80us; 163us; 87us; 163us; 92us; 163us; 94us; 163us; 109us; 163us; 111us; 163us; 113us; 163us; 115us; 163us; 117us; 163us; 119us; 163us; 122us; 163us; 125us; 163us; 127us; 163us; 148us; 163us; 149us; 163us; 150us; 163us; 151us; 163us; 152us; 163us; 153us; 163us; 154us; 163us; 155us; 163us; 156us; 163us; 157us; 163us; 158us; 163us; 159us; 163us; 160us; 163us; 161us; 163us; 162us; 163us; 164us; 163us; 172us; 163us; 175us; 163us; 178us; 163us; 9us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; 47us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 19us; 24us; 27us; 30us; 34us; 47us; 52us; 60us; 71us; 74us; 77us; 88us; 135us; 182us; 230us; 282us; 284us; 287us; 335us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 1us; 22us; 15us; 22us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 22us; 1us; 22us; 1us; 23us; 3us; 23us; 29us; 38us; 1us; 24us; 15us; 25us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 25us; 2us; 26us; 27us; 1us; 26us; 15us; 27us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 27us; 1us; 28us; 3us; 29us; 38us; 39us; 3us; 29us; 38us; 39us; 17us; 29us; 38us; 39us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 3us; 29us; 38us; 39us; 2us; 29us; 38us; 1us; 29us; 2us; 30us; 40us; 2us; 30us; 40us; 16us; 30us; 40us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 2us; 30us; 40us; 1us; 30us; 2us; 31us; 41us; 2us; 31us; 41us; 16us; 31us; 41us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 2us; 31us; 41us; 16us; 31us; 41us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 2us; 31us; 41us; 16us; 31us; 41us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 2us; 31us; 41us; 1us; 31us; 4us; 32us; 33us; 42us; 43us; 4us; 32us; 33us; 42us; 43us; 18us; 32us; 33us; 42us; 43us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 4us; 32us; 33us; 42us; 43us; 4us; 32us; 33us; 42us; 43us; 4us; 32us; 33us; 42us; 43us; 2us; 32us; 42us; 2us; 33us; 43us; 2us; 33us; 43us; 2us; 33us; 43us; 2us; 33us; 43us; 2us; 35us; 36us; 1us; 36us; 1us; 37us; 15us; 37us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 9us; 44us; 49us; 50us; 51us; 52us; 53us; 54us; 77us; 80us; 8us; 44us; 49us; 50us; 51us; 52us; 53us; 54us; 80us; 1us; 45us; 2us; 45us; 74us; 1us; 46us; 2us; 46us; 80us; 1us; 47us; 2us; 47us; 80us; 1us; 48us; 1us; 49us; 15us; 49us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 50us; 15us; 50us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 51us; 15us; 51us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 52us; 15us; 52us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 53us; 15us; 53us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 54us; 15us; 54us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 2us; 55us; 76us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 15us; 56us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 57us; 15us; 57us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 1us; 58us; 15us; 59us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 71us; 72us; 14us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 72us; 15us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 80us; 16us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 83us; 84us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 2us; 74us; 77us; 1us; 74us; 1us; 75us; 2us; 75us; 80us; 1us; 76us; 1us; 77us; 2us; 77us; 80us; 1us; 77us; 2us; 78us; 79us; 2us; 78us; 80us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 82us; 1us; 84us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 90us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 97us; 99us; 101us; 103us; 119us; 121us; 123us; 125us; 129us; 131us; 147us; 149us; 152us; 154us; 170us; 172us; 174us; 178us; 182us; 200us; 204us; 207us; 209us; 212us; 215us; 232us; 235us; 237us; 240us; 243us; 260us; 263us; 280us; 283us; 300us; 303us; 305us; 310us; 315us; 334us; 339us; 344us; 349us; 352us; 355us; 358us; 361us; 364us; 367us; 369us; 371us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; 409us; 418us; 420us; 423us; 425us; 428us; 430us; 433us; 435us; 437us; 453us; 455us; 471us; 473us; 489us; 491us; 507us; 509us; 525us; 527us; 543us; 546us; 548us; 550us; 552us; 554us; 570us; 572us; 588us; 590us; 606us; 622us; 638us; 654us; 670us; 686us; 702us; 718us; 734us; 750us; 766us; 782us; 798us; 814us; 829us; 845us; 861us; 878us; 880us; 882us; 884us; 886us; 888us; 890us; 892us; 894us; 896us; 898us; 900us; 902us; 904us; 906us; 908us; 910us; 913us; 915us; 917us; 920us; 922us; 924us; 927us; 929us; 932us; 935us; 937us; 939us; 941us; 943us; 945us; 947us; 949us; 951us; 953us; 955us; 957us; 959us; |]
let _fsyacc_action_rows = 187
let _fsyacc_actionTableElements = [|3us; 16386us; 34us; 186us; 37us; 185us; 42us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 16386us; 34us; 186us; 37us; 185us; 42us; 23us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 29us; 14us; 49us; 12us; 3us; 32768us; 1us; 16us; 29us; 14us; 49us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 29us; 14us; 49us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 29us; 14us; 49us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 50us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 49us; 24us; 1us; 32768us; 1us; 25us; 2us; 16398us; 34us; 186us; 37us; 185us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 2us; 16398us; 34us; 186us; 37us; 185us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 2us; 32768us; 34us; 186us; 37us; 185us; 0us; 16401us; 21us; 16403us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 34us; 186us; 36us; 59us; 37us; 185us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 1us; 32768us; 4us; 39us; 0us; 16402us; 21us; 16403us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 34us; 186us; 36us; 59us; 37us; 185us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16404us; 2us; 32768us; 7us; 43us; 9us; 45us; 21us; 16403us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 34us; 186us; 36us; 59us; 37us; 185us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16405us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 7us; 47us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 21us; 16403us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 34us; 186us; 36us; 59us; 37us; 185us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16406us; 0us; 16407us; 1us; 16407us; 35us; 63us; 0us; 16408us; 15us; 32768us; 7us; 53us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 0us; 16409us; 14us; 32768us; 1us; 164us; 7us; 55us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16410us; 15us; 32768us; 7us; 57us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 0us; 16411us; 0us; 16412us; 1us; 32768us; 1us; 60us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 2us; 62us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 19us; 32768us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 36us; 59us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 19us; 32768us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 36us; 59us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16413us; 1us; 32768us; 1us; 66us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 2us; 68us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 19us; 32768us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 36us; 59us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16414us; 1us; 32768us; 1us; 71us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 7us; 73us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 7us; 75us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 2us; 77us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 19us; 32768us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 36us; 59us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16415us; 1us; 32768us; 1us; 80us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 2us; 82us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 1us; 32768us; 3us; 83us; 1us; 16418us; 46us; 92us; 2us; 32768us; 4us; 85us; 47us; 86us; 0us; 16416us; 1us; 32768us; 11us; 87us; 19us; 32768us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 36us; 59us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 1us; 32768us; 4us; 89us; 0us; 16417us; 1us; 16418us; 46us; 92us; 0us; 16420us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 15us; 32768us; 11us; 94us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 19us; 32768us; 1us; 164us; 3us; 37us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 36us; 59us; 38us; 184us; 39us; 127us; 40us; 129us; 41us; 54us; 43us; 65us; 44us; 70us; 45us; 79us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 8us; 16428us; 2us; 171us; 5us; 175us; 9us; 109us; 22us; 111us; 23us; 113us; 24us; 115us; 25us; 117us; 26us; 119us; 7us; 16428us; 5us; 175us; 9us; 109us; 22us; 111us; 23us; 113us; 24us; 115us; 25us; 117us; 26us; 119us; 0us; 16429us; 1us; 16429us; 2us; 165us; 3us; 32768us; 1us; 169us; 29us; 172us; 49us; 168us; 1us; 16430us; 5us; 175us; 3us; 32768us; 1us; 169us; 29us; 172us; 49us; 168us; 1us; 16431us; 5us; 175us; 0us; 16432us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 14us; 16433us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 14us; 16434us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 14us; 16435us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 14us; 16436us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 14us; 16437us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 14us; 16438us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 1us; 16460us; 1us; 122us; 13us; 16465us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 1us; 32768us; 2us; 124us; 0us; 16439us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16440us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 14us; 16441us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 0us; 16442us; 3us; 16443us; 29us; 150us; 30us; 151us; 31us; 152us; 3us; 16444us; 29us; 150us; 30us; 151us; 31us; 152us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 9us; 16448us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 9us; 16449us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 9us; 16450us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 9us; 16451us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 9us; 16452us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 15us; 32768us; 11us; 159us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 14us; 16453us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 9us; 16454us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 11us; 16455us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 14us; 32768us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 12us; 16456us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 15us; 32768us; 6us; 176us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 15us; 16467us; 8us; 178us; 12us; 158us; 14us; 162us; 15us; 161us; 16us; 153us; 17us; 154us; 18us; 155us; 19us; 156us; 20us; 157us; 21us; 160us; 27us; 148us; 28us; 149us; 29us; 150us; 30us; 151us; 31us; 152us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16457us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16458us; 3us; 32768us; 1us; 169us; 29us; 172us; 49us; 168us; 1us; 16459us; 5us; 175us; 0us; 16460us; 3us; 32768us; 1us; 169us; 29us; 172us; 49us; 168us; 2us; 32768us; 2us; 171us; 5us; 175us; 0us; 16461us; 8us; 32768us; 1us; 164us; 10us; 166us; 28us; 182us; 29us; 172us; 38us; 184us; 49us; 168us; 50us; 180us; 51us; 181us; 1us; 16462us; 5us; 175us; 0us; 16463us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16464us; 0us; 16466us; 13us; 32768us; 1us; 164us; 10us; 166us; 13us; 125us; 28us; 182us; 29us; 172us; 32us; 106us; 33us; 104us; 38us; 184us; 39us; 127us; 40us; 129us; 49us; 121us; 50us; 180us; 51us; 181us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 1us; 32768us; 50us; 183us; 0us; 16471us; 0us; 16472us; 0us; 16473us; 0us; 16474us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 100us; 102us; 103us; 125us; 126us; 129us; 151us; 152us; 166us; 182us; 204us; 205us; 206us; 208us; 209us; 225us; 226us; 241us; 242us; 258us; 259us; 260us; 262us; 276us; 292us; 312us; 332us; 333us; 335us; 349us; 365us; 385us; 386us; 388us; 402us; 418us; 432us; 448us; 462us; 478us; 498us; 499us; 501us; 515us; 531us; 533us; 535us; 538us; 539us; 541us; 561us; 563us; 564us; 566us; 567us; 581us; 597us; 617us; 618us; 619us; 620us; 621us; 622us; 631us; 639us; 640us; 642us; 646us; 648us; 652us; 654us; 655us; 669us; 684us; 698us; 713us; 727us; 742us; 756us; 771us; 785us; 800us; 814us; 829us; 831us; 845us; 847us; 848us; 862us; 863us; 877us; 892us; 893us; 897us; 901us; 902us; 903us; 904us; 914us; 924us; 934us; 944us; 954us; 970us; 985us; 995us; 1007us; 1022us; 1035us; 1051us; 1067us; 1081us; 1095us; 1109us; 1123us; 1137us; 1151us; 1165us; 1179us; 1193us; 1207us; 1221us; 1235us; 1249us; 1263us; 1277us; 1278us; 1292us; 1293us; 1297us; 1299us; 1300us; 1304us; 1307us; 1308us; 1317us; 1319us; 1320us; 1334us; 1335us; 1336us; 1350us; 1351us; 1352us; 1353us; 1355us; 1356us; 1357us; 1358us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 5us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 9us; 7us; 10us; 0us; 1us; 2us; 4us; 7us; 5us; 5us; 9us; 7us; 10us; 1us; 1us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 3us; 3us; 3us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 23us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 16406us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 65535us; 16411us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 16421us; 16422us; 16423us; 16424us; 16425us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 65535us; 16442us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16457us; 65535us; 16458us; 65535us; 65535us; 16460us; 65535us; 65535us; 16461us; 65535us; 65535us; 16463us; 65535us; 16464us; 16466us; 65535us; 16468us; 16469us; 16470us; 65535us; 16471us; 16472us; 16473us; 16474us; |]
let _fsyacc_reductions ()  =    [| 
# 497 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 506 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "CPar.fsy"
                                                               Prog _1 
                   )
# 48 "CPar.fsy"
                 : Absyn.program));
# 517 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CPar.fsy"
                                                               [] 
                   )
# 52 "CPar.fsy"
                 : 'Topdecs));
# 527 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 53 "CPar.fsy"
                 : 'Topdecs));
# 539 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 57 "CPar.fsy"
                 : 'Topdec));
# 550 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "CPar.fsy"
                                                               _1 
                   )
# 58 "CPar.fsy"
                 : 'Topdec));
# 561 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 62 "CPar.fsy"
                 : 'Vardec));
# 573 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 67 "CPar.fsy"
                 : 'Vardesc));
# 584 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 68 "CPar.fsy"
                 : 'Vardesc));
# 595 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CPar.fsy"
                                                               _2                                      
                   )
# 69 "CPar.fsy"
                 : 'Vardesc));
# 606 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 70 "CPar.fsy"
                 : 'Vardesc));
# 617 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 71 "CPar.fsy"
                 : 'Vardesc));
# 629 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 75 "CPar.fsy"
                 : 'Fundec));
# 642 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 76 "CPar.fsy"
                 : 'Fundec));
# 656 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CPar.fsy"
                                                               [] 
                   )
# 80 "CPar.fsy"
                 : 'Paramdecs));
# 666 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CPar.fsy"
                                                               _1 
                   )
# 81 "CPar.fsy"
                 : 'Paramdecs));
# 677 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "CPar.fsy"
                                                               [_1]     
                   )
# 85 "CPar.fsy"
                 : 'Paramdecs1));
# 688 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 86 "CPar.fsy"
                 : 'Paramdecs1));
# 700 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               Block _2 
                   )
# 90 "CPar.fsy"
                 : 'Block));
# 711 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CPar.fsy"
                                                               [] 
                   )
# 94 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 721 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 95 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 733 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 96 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 745 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                                   DecAssign (fst _1,snd _1,_3) :: _5 
                   )
# 97 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 758 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               _1 
                   )
# 101 "CPar.fsy"
                 : 'Stmt));
# 769 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               _1 
                   )
# 102 "CPar.fsy"
                 : 'Stmt));
# 780 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 106 "CPar.fsy"
                 : 'StmtM));
# 791 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                               Return None          
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 801 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 108 "CPar.fsy"
                 : 'StmtM));
# 812 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                               _1                   
                   )
# 109 "CPar.fsy"
                 : 'StmtM));
# 823 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 110 "CPar.fsy"
                 : 'StmtM));
# 836 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 111 "CPar.fsy"
                 : 'StmtM));
# 848 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                                        For(_3,_5,_7,_9) 
                   )
# 112 "CPar.fsy"
                 : 'StmtM));
# 862 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'CaseList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "CPar.fsy"
                                                                        Switch(_3, _6)   
                   )
# 113 "CPar.fsy"
                 : 'StmtM));
# 874 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'CaseList)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                                                           SwitchDefault(_3, _6, _9)  
                   )
# 114 "CPar.fsy"
                 : 'StmtM));
# 887 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "CPar.fsy"
                                                               []                   
                   )
# 118 "CPar.fsy"
                 : 'CaseList));
# 897 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CaseDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               [_1]                 
                   )
# 119 "CPar.fsy"
                 : 'CaseList));
# 908 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CaseDec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CaseList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               _1 :: _2             
                   )
# 120 "CPar.fsy"
                 : 'CaseList));
# 920 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                               (_2, _4)             
                   )
# 123 "CPar.fsy"
                 : 'CaseDec));
# 932 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 126 "CPar.fsy"
                 : 'StmtU));
# 945 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 127 "CPar.fsy"
                 : 'StmtU));
# 957 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 128 "CPar.fsy"
                 : 'StmtU));
# 969 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                                        For(_3,_5,_7,_9) 
                   )
# 129 "CPar.fsy"
                 : 'StmtU));
# 983 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'CaseList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                                        Switch(_3, _6)   
                   )
# 130 "CPar.fsy"
                 : 'StmtU));
# 995 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'CaseList)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                                                           SwitchDefault(_3, _6, _9)  
                   )
# 131 "CPar.fsy"
                 : 'StmtU));
# 1008 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Access _1           
                   )
# 135 "CPar.fsy"
                 : 'Expr));
# 1019 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               _1                  
                   )
# 136 "CPar.fsy"
                 : 'Expr));
# 1030 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                                 PreDec _2         
                   )
# 137 "CPar.fsy"
                 : 'Expr));
# 1041 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                                 PreInc _2         
                   )
# 138 "CPar.fsy"
                 : 'Expr));
# 1052 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               _1                  
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1063 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1075 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               PlusAssign(_1, _3)  
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1087 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               MinusAssign(_1, _3) 
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1099 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               TimesAssign(_1, _3) 
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1111 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               DivAssign(_1, _3)   
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1123 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               ModAssign(_1, _3)   
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1135 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1147 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 151 "CPar.fsy"
                 : 'ExprNotAccess));
# 1158 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 152 "CPar.fsy"
                 : 'ExprNotAccess));
# 1169 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 153 "CPar.fsy"
                 : 'ExprNotAccess));
# 1179 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 154 "CPar.fsy"
                 : 'ExprNotAccess));
# 1191 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 155 "CPar.fsy"
                 : 'ExprNotAccess));
# 1203 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 156 "CPar.fsy"
                 : 'ExprNotAccess));
# 1215 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 157 "CPar.fsy"
                 : 'ExprNotAccess));
# 1227 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 158 "CPar.fsy"
                 : 'ExprNotAccess));
# 1239 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 159 "CPar.fsy"
                 : 'ExprNotAccess));
# 1251 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 160 "CPar.fsy"
                 : 'ExprNotAccess));
# 1263 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 161 "CPar.fsy"
                 : 'ExprNotAccess));
# 1275 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 162 "CPar.fsy"
                 : 'ExprNotAccess));
# 1287 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 163 "CPar.fsy"
                 : 'ExprNotAccess));
# 1299 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "CPar.fsy"
                                                               Prim3(_1, _3, _5)   
                   )
# 164 "CPar.fsy"
                 : 'ExprNotAccess));
# 1312 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 165 "CPar.fsy"
                 : 'ExprNotAccess));
# 1324 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 166 "CPar.fsy"
                 : 'ExprNotAccess));
# 1336 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 167 "CPar.fsy"
                 : 'ExprNotAccess));
# 1348 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CPar.fsy"
                                                               CstI _1             
                   )
# 172 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1359 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               _2                  
                   )
# 173 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1370 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               Addr _2             
                   )
# 174 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1381 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CPar.fsy"
                                                               AccVar _1           
                   )
# 178 "CPar.fsy"
                 : 'Access));
# 1392 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               _2                  
                   )
# 179 "CPar.fsy"
                 : 'Access));
# 1403 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 180 "CPar.fsy"
                 : 'Access));
# 1414 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 181 "CPar.fsy"
                 : 'Access));
# 1425 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 182 "CPar.fsy"
                 : 'Access));
# 1437 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "CPar.fsy"
                                                               []       
                   )
# 187 "CPar.fsy"
                 : 'Exprs));
# 1447 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "CPar.fsy"
                                                               _1       
                   )
# 188 "CPar.fsy"
                 : 'Exprs));
# 1458 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "CPar.fsy"
                                                               [_1]     
                   )
# 192 "CPar.fsy"
                 : 'Exprs1));
# 1469 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 193 "CPar.fsy"
                 : 'Exprs1));
# 1481 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "CPar.fsy"
                                                               _1       
                   )
# 197 "CPar.fsy"
                 : 'Const));
# 1492 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "CPar.fsy"
                                                               _1       
                   )
# 198 "CPar.fsy"
                 : 'Const));
# 1503 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "CPar.fsy"
                                                               - _2     
                   )
# 199 "CPar.fsy"
                 : 'Const));
# 1514 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "CPar.fsy"
                                                               -1       
                   )
# 200 "CPar.fsy"
                 : 'Const));
# 1524 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "CPar.fsy"
                                                               TypI     
                   )
# 204 "CPar.fsy"
                 : 'Type));
# 1534 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "CPar.fsy"
                                                               TypC     
                   )
# 205 "CPar.fsy"
                 : 'Type));
|]
# 1545 "CPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 55;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
